# RESTful 服务配置
server:
  mode: "release"  # 存在3种 debug test release
  healthz: true
  middlewares: recovery,cors,nocache,cors   # recovery,logger,secure,nocache,cors,dump(中间件来打印请求和响应的头部和主体)
  max-ping-count: 3 # http 服务启动后，自检尝试次数，默认 3

# 开启相关分析
feature:
  enable-metrics: true # 开启 metrics, router:  /metrics
  profiling: true # 开启性能分析, 可以通过 <host>:<port>/debug/pprof/地址查看程序栈、线程等系统信息，默认值为 true

# HTTP 服务配置
insecure:
  bind-address: "0.0.0.0" # 绑定的不安全 IP 地址，设置为 0.0.0.0 表示使用全部网络接口，默认为 127.0.0.1
  bind-port: 8990 # 提供非安全认证的监听端口，默认为 8080

# HTTPS服务配置
secure:
  bind-address: "0.0.0.0"  # HTTPS 安全模式的 IP 地址，默认为 0.0.0.0
  bind-port: 8443 # 使用 HTTPS 安全模式的端口号，设置为 0 表示不启用 HTTPS，默认为 8443
  tls:
    cert-key:
      #cert-file: "../../config/cert/iam.pem" # 包含 x509 证书的文件路径，用 HTTPS 认证
      #key-file: "../../config/cert/iam-key.pem" # TLS 私钥
      cert-file: "/app/dist/config/cert/iam.pem" # 包含 x509 证书的文件路径，用 HTTPS 认证
      key-file: "/app/dist/config/cert/iam-key.pem" # TLS 私钥

    # cert-directory: "" # TLS 证书所在的目录，默认值为 /var/run/iam , # 若指定其 cert-file = cert-directory/pair-name.crt   ,直接使用 cert-key || cert-directory + pair-name 进行2选1
    # pair-name : "iam"  # TLS 私钥对名称，默认 iam    # 若指定其 private-key-file = cert-directory/pair-name.key

# GRPC服务配置
grpc:
  bind-address: "0.0.0.0"  # grpc 安全模式的 IP 地址，默认 0.0.0.0
  bind-port: 8081  # 8081

#MYSQL配置
mysql:
  host: "127.0.0.1:3306"
  username: "root"
  password: "root"
  database: "demo"
  max-idle-connections: 100 # MySQL 最大空闲连接数，默认 100
  max-open-connections: 100 # MySQL 最大打开的连接数，默认 100
  max-connection-life-time: 10s
  log-level: 0

redis:
  host: "127.0.0.1:6379" # redis 地址，默认 127.0.0.1:6379
  port: 6379 # redis 端口，默认 6379
  password: "" # redis 密码
  #addrs:
  #master-name: # redis 集群 master 名称
  #username: # redis 登录用户名
  #database: # redis 数据库
  #optimisation-max-idle:  # redis 连接池中的最大空闲连接数
  #optimisation-max-active: # 最大活跃连接数
  #timeout: # 连接 redis 时的超时时间
  #enable-cluster: # 是否开启集群模式
  #use-ssl: # 是否启用 TLS
  #ssl-insecure-skip-verify: # 当连接 redis 时允许使用自签名证书

jwt:
  realm: "JWT" # jwt 标识
  key: "dfVpOK8LZeJLZHYmHdb1VdyRrACKpqoo" # 服务端密钥,生成jwt使用
  timeout: 24h # token 过期时间(小时)
  max-refresh: 24h # token 更新时间(小时)
